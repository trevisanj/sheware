#Boa:Dialog:DialogImport

import wx
from output import *
from errors import *
import file_importer as fi
import file_types
data = file_types.get_tuple()
file_type_choices = [i for (i, j) in data]
from session import session
from errors import *
from table_filerescheme import t_filerescheme
from db_con import con

#ctrl = None # Assigned later ahead
#def output(s, severity = 2):
#  ctrl.AppendText(ou.LEGEND[severity]+str(s)+"\n")


def create(parent):
    return DialogImport(parent)

[wxID_DIALOGIMPORT, wxID_DIALOGIMPORTBUTTONCANCEL, wxID_DIALOGIMPORTBUTTONOK, 
 wxID_DIALOGIMPORTBUTTONSCHEMEDELETE, wxID_DIALOGIMPORTBUTTONSCHEMENEW, 
 wxID_DIALOGIMPORTBUTTONSCHEMESAVE, wxID_DIALOGIMPORTBUTTONSIMULATE, 
 wxID_DIALOGIMPORTCHOICETYPE, wxID_DIALOGIMPORTCOMBOBOXSCHEMENAME, 
 wxID_DIALOGIMPORTPANELBOTTOM, wxID_DIALOGIMPORTPANELCLIENT, 
 wxID_DIALOGIMPORTPANELSCHEME, wxID_DIALOGIMPORTPANELSCHEMECONTENTS, 
 wxID_DIALOGIMPORTPANELSCHEMENAME, wxID_DIALOGIMPORTSTATICTEXT1, 
 wxID_DIALOGIMPORTSTATICTEXT2, wxID_DIALOGIMPORTSTATICTEXT3, 
 wxID_DIALOGIMPORTSTATICTEXT4, wxID_DIALOGIMPORTSTATICTEXTDIGITS, 
 wxID_DIALOGIMPORTSTATICTEXTFILES, wxID_DIALOGIMPORTSTATICTEXTNAMINGSCHEME, 
 wxID_DIALOGIMPORTSTATICTEXTPATH, wxID_DIALOGIMPORTSTATICTEXTTYPE, 
 wxID_DIALOGIMPORTTEXTCTRLCOMMENTS, wxID_DIALOGIMPORTTEXTCTRLDIGITS, 
 wxID_DIALOGIMPORTTEXTCTRLFILES, wxID_DIALOGIMPORTTEXTCTRLLOG, 
 wxID_DIALOGIMPORTTEXTCTRLPATH, wxID_DIALOGIMPORTTEXTCTRLPATTERNCOLONY, 
 wxID_DIALOGIMPORTTEXTCTRLPATTERNSLIDE, wxID_DIALOGIMPORTTEXTCTRLPATTERNTRAY, 
 wxID_DIALOGIMPORTTEXTCTRLREGEXP, 
] = [wx.NewId() for _init_ctrls in range(32)]

class DialogImport(wx.Dialog):
  def _init_coll_flexGridSizerBody_Growables(self, parent):
    # generated method, don't edit

    parent.AddGrowableRow(1)
    parent.AddGrowableCol(1)

  def _init_coll_boxSizerBottomPanel_Items(self, parent):
    # generated method, don't edit

    parent.AddWindow(self.buttonSimulate, 1, border=10, flag=wx.GROW | wx.ALL)
    parent.AddWindow(self.buttonOk, 1, border=10, flag=wx.ALL | wx.ALIGN_RIGHT)
    parent.AddWindow(self.buttonCancel, 1, border=10,
          flag=wx.ALL | wx.ALIGN_RIGHT)

  def _init_coll_flexGridSizerSchemeContents_Growables(self, parent):
    # generated method, don't edit

    parent.AddGrowableCol(0)

  def _init_coll_boxSizerFrame_Items(self, parent):
    # generated method, don't edit

    parent.AddWindow(self.panelClient, 0, border=5, flag=wx.GROW | wx.ALL)
    parent.AddWindow(self.panelBottom, 0, border=0, flag=wx.GROW | wx.ALL)
    parent.AddWindow(self.textCtrlLog, 1, border=5, flag=wx.GROW | wx.ALL)

  def _init_coll_boxSizerScheme_Items(self, parent):
    # generated method, don't edit

    parent.AddWindow(self.panelSchemeName, 0, border=0, flag=0)
    parent.AddWindow(self.textCtrlComments, 1, border=0, flag=wx.GROW)
    parent.AddWindow(self.panelSchemeContents, 0, border=0, flag=wx.GROW)

  def _init_coll_boxSizerNamingScheme_Items(self, parent):
    # generated method, don't edit

    parent.AddWindow(self.comboBoxSchemeName, 1, border=0,
          flag=wx.ALIGN_CENTER_VERTICAL | wx.ALL)
    parent.AddWindow(self.buttonSchemeSave, 0, border=5, flag=wx.ALL)
    parent.AddWindow(self.buttonSchemeNew, 0, border=5, flag=wx.ALL)
    parent.AddWindow(self.buttonSchemeDelete, 0, border=5, flag=wx.ALL)

  def _init_coll_flexGridSizerSchemeContents_Items(self, parent):
    # generated method, don't edit

    parent.AddWindow(self.staticTextDigits, 0, border=3,
          flag=wx.GROW | wx.ALIGN_CENTER_VERTICAL | wx.ALL)
    parent.AddWindow(self.textCtrlDigits, 0, border=0,
          flag=wx.ALIGN_CENTER_VERTICAL)
    parent.AddWindow(self.staticText1, 0, border=3,
          flag=wx.GROW | wx.ALIGN_CENTER_VERTICAL | wx.ALL)
    parent.AddWindow(self.textCtrlRegexp, 0, border=0,
          flag=wx.ALIGN_CENTER_VERTICAL)
    parent.AddWindow(self.staticText2, 0, border=3,
          flag=wx.GROW | wx.ALIGN_CENTER_VERTICAL | wx.ALL)
    parent.AddWindow(self.textCtrlPatternTray, 0, border=0,
          flag=wx.ALIGN_CENTER_VERTICAL)
    parent.AddWindow(self.staticText3, 0, border=3,
          flag=wx.GROW | wx.ALIGN_CENTER_VERTICAL | wx.ALL)
    parent.AddWindow(self.textCtrlPatternSlide, 0, border=0,
          flag=wx.ALIGN_CENTER_VERTICAL)
    parent.AddWindow(self.staticText4, 0, border=3,
          flag=wx.GROW | wx.ALIGN_CENTER_VERTICAL | wx.ALL)
    parent.AddWindow(self.textCtrlPatternColony, 0, border=0,
          flag=wx.ALIGN_CENTER_VERTICAL)

  def _init_coll_flexGridSizerBody_Items(self, parent):
    # generated method, don't edit

    parent.AddWindow(self.staticTextType, 0, border=5,
          flag=wx.ALIGN_CENTER_VERTICAL)
    parent.AddWindow(self.choiceType, 0, border=10, flag=wx.GROW)
    parent.AddWindow(self.staticTextPath, 0, border=5,
          flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL)
    parent.AddWindow(self.textCtrlPath, 0, border=5, flag=wx.GROW)
    parent.AddWindow(self.staticTextFiles, 0, border=5,
          flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL)
    parent.AddWindow(self.textCtrlFiles, 0, border=5, flag=0)
    parent.AddWindow(self.staticTextNamingScheme, 0, border=0,
          flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL)
    parent.AddWindow(self.panelScheme, 1, border=0, flag=wx.GROW)

  def _init_sizers(self):
    # generated method, don't edit
    self.boxSizerFrame = wx.BoxSizer(orient=wx.VERTICAL)

    self.boxSizerBottomPanel = wx.BoxSizer(orient=wx.HORIZONTAL)

    self.flexGridSizerBody = wx.FlexGridSizer(cols=2, hgap=5, rows=5, vgap=3)
    self.flexGridSizerBody.SetMinSize(wx.Size(48, 72))

    self.boxSizerScheme = wx.BoxSizer(orient=wx.VERTICAL)

    self.boxSizerNamingScheme = wx.BoxSizer(orient=wx.HORIZONTAL)

    self.flexGridSizerSchemeContents = wx.FlexGridSizer(cols=2, hgap=0, rows=5,
          vgap=0)

    self._init_coll_boxSizerFrame_Items(self.boxSizerFrame)
    self._init_coll_boxSizerBottomPanel_Items(self.boxSizerBottomPanel)
    self._init_coll_flexGridSizerBody_Items(self.flexGridSizerBody)
    self._init_coll_flexGridSizerBody_Growables(self.flexGridSizerBody)
    self._init_coll_boxSizerScheme_Items(self.boxSizerScheme)
    self._init_coll_boxSizerNamingScheme_Items(self.boxSizerNamingScheme)
    self._init_coll_flexGridSizerSchemeContents_Items(self.flexGridSizerSchemeContents)
    self._init_coll_flexGridSizerSchemeContents_Growables(self.flexGridSizerSchemeContents)

    self.SetSizer(self.boxSizerFrame)
    self.panelBottom.SetSizer(self.boxSizerBottomPanel)
    self.panelSchemeName.SetSizer(self.boxSizerNamingScheme)
    self.panelSchemeContents.SetSizer(self.flexGridSizerSchemeContents)
    self.panelClient.SetSizer(self.flexGridSizerBody)
    self.panelScheme.SetSizer(self.boxSizerScheme)

  def _init_ctrls(self, prnt):
    # generated method, don't edit
    wx.Dialog.__init__(self, id=wxID_DIALOGIMPORT, name='DialogImport',
          parent=prnt, pos=wx.Point(1999, 282), size=wx.Size(700, 631),
          style=wx.DEFAULT_FRAME_STYLE, title='Import files')
    self.SetClientSize(wx.Size(700, 631))
    self.Center(wx.BOTH)
    self.Bind(wx.EVT_ACTIVATE, self.OnDialogImportActivate)
    self.Bind(wx.EVT_CLOSE, self.OnDialogImportClose)

    self.panelBottom = wx.Panel(id=wxID_DIALOGIMPORTPANELBOTTOM,
          name='panelBottom', parent=self, pos=wx.Point(0, 339),
          size=wx.Size(700, 50), style=wx.TAB_TRAVERSAL)

    self.buttonOk = wx.Button(id=wxID_DIALOGIMPORTBUTTONOK, label='&Import!',
          name='buttonOk', parent=self.panelBottom, pos=wx.Point(243, 10),
          size=wx.Size(213, 30), style=0)
    self.buttonOk.SetDefault()
    self.buttonOk.Bind(wx.EVT_BUTTON, self.OnButtonOkButton,
          id=wxID_DIALOGIMPORTBUTTONOK)

    self.buttonCancel = wx.Button(id=wxID_DIALOGIMPORTBUTTONCANCEL,
          label='&Close', name='buttonCancel', parent=self.panelBottom,
          pos=wx.Point(476, 10), size=wx.Size(213, 30), style=0)
    self.buttonCancel.Bind(wx.EVT_BUTTON, self.OnButtonCancelButton,
          id=wxID_DIALOGIMPORTBUTTONCANCEL)

    self.panelClient = wx.Panel(id=wxID_DIALOGIMPORTPANELCLIENT,
          name='panelClient', parent=self, pos=wx.Point(5, 5), size=wx.Size(690,
          329), style=wx.TAB_TRAVERSAL)

    self.staticTextType = wx.StaticText(id=wxID_DIALOGIMPORTSTATICTEXTTYPE,
          label='File type', name='staticTextType', parent=self.panelClient,
          pos=wx.Point(0, 4), size=wx.Size(116, 13), style=0)

    self.staticTextPath = wx.StaticText(id=wxID_DIALOGIMPORTSTATICTEXTPATH,
          label='Path', name='staticTextPath', parent=self.panelClient,
          pos=wx.Point(5, 29), size=wx.Size(120, 13), style=0)

    self.staticTextFiles = wx.StaticText(id=wxID_DIALOGIMPORTSTATICTEXTFILES,
          label='Files', name='staticTextFiles', parent=self.panelClient,
          pos=wx.Point(5, 55), size=wx.Size(120, 13), style=0)

    self.choiceType = wx.Choice(choices=[], id=wxID_DIALOGIMPORTCHOICETYPE,
          name='choiceType', parent=self.panelClient, pos=wx.Point(135, 0),
          size=wx.Size(555, 21), style=0)

    self.textCtrlPath = wx.TextCtrl(id=wxID_DIALOGIMPORTTEXTCTRLPATH,
          name='textCtrlPath', parent=self.panelClient, pos=wx.Point(135, 24),
          size=wx.Size(555, 23), style=0, value='.')

    self.textCtrlFiles = wx.TextCtrl(id=wxID_DIALOGIMPORTTEXTCTRLFILES,
          name='textCtrlFiles', parent=self.panelClient, pos=wx.Point(135, 50),
          size=wx.Size(41, 21), style=0, value=u'*.DAT')

    self.buttonSimulate = wx.Button(id=wxID_DIALOGIMPORTBUTTONSIMULATE,
          label='Simulation (does not change database)', name='buttonSimulate',
          parent=self.panelBottom, pos=wx.Point(10, 10), size=wx.Size(213, 30),
          style=0)
    self.buttonSimulate.Bind(wx.EVT_BUTTON, self.OnButtonSimulateButton,
          id=wxID_DIALOGIMPORTBUTTONSIMULATE)

    self.textCtrlLog = wx.TextCtrl(id=wxID_DIALOGIMPORTTEXTCTRLLOG,
          name='textCtrlLog', parent=self, pos=wx.Point(5, 394),
          size=wx.Size(690, 240), style=wx.TE_MULTILINE, value='')
    self.textCtrlLog.SetBackgroundColour(wx.Colour(0, 0, 0))
    self.textCtrlLog.SetBackgroundStyle(wx.BG_STYLE_SYSTEM)
    self.textCtrlLog.SetForegroundColour(wx.Colour(0, 255, 0))
    self.textCtrlLog.SetFont(wx.Font(8, wx.SWISS, wx.NORMAL, wx.NORMAL, False,
          'Courier New'))

    self.staticTextNamingScheme = wx.StaticText(id=wxID_DIALOGIMPORTSTATICTEXTNAMINGSCHEME,
          label='Naming scheme', name='staticTextNamingScheme',
          parent=self.panelClient, pos=wx.Point(0, 186), size=wx.Size(112, 33),
          style=0)

    self.panelScheme = wx.Panel(id=wxID_DIALOGIMPORTPANELSCHEME,
          name='panelScheme', parent=self.panelClient, pos=wx.Point(135, 76),
          size=wx.Size(555, 253), style=wx.TAB_TRAVERSAL)

    self.panelSchemeName = wx.Panel(id=wxID_DIALOGIMPORTPANELSCHEMENAME,
          name='panelSchemeName', parent=self.panelScheme, pos=wx.Point(0, 0),
          size=wx.Size(509, 33), style=wx.TAB_TRAVERSAL)

    self.comboBoxSchemeName = wx.ComboBox(choices=[],
          id=wxID_DIALOGIMPORTCOMBOBOXSCHEMENAME, name='comboBoxSchemeName',
          parent=self.panelSchemeName, pos=wx.Point(0, 6), size=wx.Size(254,
          21), style=0, value='')
    self.comboBoxSchemeName.SetLabel('')
    self.comboBoxSchemeName.Bind(wx.EVT_COMBOBOX,
          self.OnComboBoxSchemeNameCombobox,
          id=wxID_DIALOGIMPORTCOMBOBOXSCHEMENAME)
    self.comboBoxSchemeName.Bind(wx.EVT_TEXT, self.OnComboBoxSchemeNameText,
          id=wxID_DIALOGIMPORTCOMBOBOXSCHEMENAME)

    self.buttonSchemeSave = wx.Button(id=wxID_DIALOGIMPORTBUTTONSCHEMESAVE,
          label='&Save', name='buttonSchemeSave', parent=self.panelSchemeName,
          pos=wx.Point(259, 5), size=wx.Size(75, 23), style=0)
    self.buttonSchemeSave.Bind(wx.EVT_BUTTON, self.OnButtonSchemeSaveButton,
          id=wxID_DIALOGIMPORTBUTTONSCHEMESAVE)

    self.buttonSchemeNew = wx.Button(id=wxID_DIALOGIMPORTBUTTONSCHEMENEW,
          label='&New', name='buttonSchemeNew', parent=self.panelSchemeName,
          pos=wx.Point(344, 5), size=wx.Size(75, 23), style=0)
    self.buttonSchemeNew.Bind(wx.EVT_BUTTON, self.OnButtonSchemeNewButton,
          id=wxID_DIALOGIMPORTBUTTONSCHEMENEW)

    self.buttonSchemeDelete = wx.Button(id=wxID_DIALOGIMPORTBUTTONSCHEMEDELETE,
          label='&Delete', name='buttonSchemeDelete',
          parent=self.panelSchemeName, pos=wx.Point(429, 5), size=wx.Size(75,
          23), style=0)
    self.buttonSchemeDelete.Bind(wx.EVT_BUTTON, self.OnButtonSchemeDeleteButton,
          id=wxID_DIALOGIMPORTBUTTONSCHEMEDELETE)

    self.panelSchemeContents = wx.Panel(id=wxID_DIALOGIMPORTPANELSCHEMECONTENTS,
          name='panelSchemeContents', parent=self.panelScheme, pos=wx.Point(0,
          96), size=wx.Size(555, 157), style=wx.TAB_TRAVERSAL)

    self.staticTextDigits = wx.StaticText(id=wxID_DIALOGIMPORTSTATICTEXTDIGITS,
          label=u'No of digits in slide code (0: ignored)',
          name='staticTextDigits', parent=self.panelSchemeContents,
          pos=wx.Point(3, 3), size=wx.Size(312, 34), style=0)

    self.textCtrlDigits = wx.TextCtrl(id=wxID_DIALOGIMPORTTEXTCTRLDIGITS,
          name='textCtrlDigits', parent=self.panelSchemeContents,
          pos=wx.Point(318, 9), size=wx.Size(44, 21), style=0, value='2')

    self.staticText1 = wx.StaticText(id=wxID_DIALOGIMPORTSTATICTEXT1,
          label=u'Regular Expression (literal letters uppercase)',
          name='staticText1', parent=self.panelSchemeContents, pos=wx.Point(3,
          43), size=wx.Size(312, 30), style=0)

    self.textCtrlRegexp = wx.TextCtrl(id=wxID_DIALOGIMPORTTEXTCTRLREGEXP,
          name='textCtrlRegexp', parent=self.panelSchemeContents,
          pos=wx.Point(318, 47), size=wx.Size(328, 21), style=0,
          value='textCtrl1')
    self.textCtrlRegexp.Bind(wx.EVT_TEXT, self.OnTextCtrlRegexpText,
          id=wxID_DIALOGIMPORTTEXTCTRLREGEXP)

    self.staticText2 = wx.StaticText(id=wxID_DIALOGIMPORTSTATICTEXT2,
          label='Pattern for Tray Code', name='staticText2',
          parent=self.panelSchemeContents, pos=wx.Point(3, 79),
          size=wx.Size(312, 21), style=0)

    self.staticText3 = wx.StaticText(id=wxID_DIALOGIMPORTSTATICTEXT3,
          label='Pattern for Slide Code', name='staticText3',
          parent=self.panelSchemeContents, pos=wx.Point(3, 106),
          size=wx.Size(312, 21), style=0)

    self.staticText4 = wx.StaticText(id=wxID_DIALOGIMPORTSTATICTEXT4,
          label='Pattern for Colony Code', name='staticText4',
          parent=self.panelSchemeContents, pos=wx.Point(3, 133),
          size=wx.Size(312, 21), style=0)

    self.textCtrlPatternTray = wx.TextCtrl(id=wxID_DIALOGIMPORTTEXTCTRLPATTERNTRAY,
          name='textCtrlPatternTray', parent=self.panelSchemeContents,
          pos=wx.Point(318, 79), size=wx.Size(155, 21), style=0,
          value='textCtrl2')
    self.textCtrlPatternTray.Bind(wx.EVT_TEXT, self.OnTextCtrlPatternTrayText,
          id=wxID_DIALOGIMPORTTEXTCTRLPATTERNTRAY)

    self.textCtrlPatternSlide = wx.TextCtrl(id=wxID_DIALOGIMPORTTEXTCTRLPATTERNSLIDE,
          name='textCtrlPatternSlide', parent=self.panelSchemeContents,
          pos=wx.Point(318, 106), size=wx.Size(155, 21), style=0,
          value='textCtrl3')
    self.textCtrlPatternSlide.Bind(wx.EVT_TEXT, self.OnTextCtrlPatternSlideText,
          id=wxID_DIALOGIMPORTTEXTCTRLPATTERNSLIDE)

    self.textCtrlPatternColony = wx.TextCtrl(id=wxID_DIALOGIMPORTTEXTCTRLPATTERNCOLONY,
          name='textCtrlPatternColony', parent=self.panelSchemeContents,
          pos=wx.Point(318, 133), size=wx.Size(155, 21), style=0,
          value='textCtrl4')
    self.textCtrlPatternColony.Bind(wx.EVT_TEXT,
          self.OnTextCtrlPatternColonyText,
          id=wxID_DIALOGIMPORTTEXTCTRLPATTERNCOLONY)

    self.textCtrlComments = wx.TextCtrl(id=wxID_DIALOGIMPORTTEXTCTRLCOMMENTS,
          name=u'textCtrlComments', parent=self.panelScheme, pos=wx.Point(0,
          33), size=wx.Size(555, 63), style=wx.TE_MULTILINE, value='textCtrl1')
    self.textCtrlComments.Bind(wx.EVT_TEXT, self.OnTextCtrlCommentsText,
          id=wxID_DIALOGIMPORTTEXTCTRLCOMMENTS)

    self._init_sizers()

  def __init__(self, parent):
    self.flag_scheme_changed = False
    self.flag_scheme = False

    self._init_ctrls(parent)
    self.init_choices()
    
    global ctrl
    ctrl = self.textCtrlLog
    
    self.read_data_scheme()
    self.default_scheme()
    
  def read_data_scheme(self):
    self.data_scheme = t_filerescheme.get_all_data(("id", "name", "digitsslide", "re", "pattray", "patslide", "patcolony", "comments"))
    self.comboBoxSchemeName.Clear()
    for i in range(0, len(self.data_scheme)):
      self.comboBoxSchemeName.Append(self.data_scheme[i][1])


  def id2index(self, id):
    result = -1
    for i in range(0, len(self.data_scheme)):
      if self.data_scheme[i][0] == id:
        result = i
        break
    return result

    
  def set_scheme_index(self, i):
    self.comboBoxSchemeName.SetSelection(i);
    if i >= 0:
      r = self.data_scheme[i];
      self.idfilerescheme = r[0];
      self.set_digitsslide(r[2])
      self.set_re(r[3])
      self.set_pattray(r[4])
      self.set_patslide(r[5])
      self.set_patcolony(r[6])
      self.set_comments(r[7])
      self.flag_scheme = True


    else:
    #Instantiates a file_importer object to steal some of its default values
      self.idfilerescheme = 0;
      self.textCtrlRegexp.SetValue("")
      self.textCtrlPatternTray.SetValue("")
      self.textCtrlPatternSlide.SetValue("")
      self.textCtrlPatternColony.SetValue("")

      self.flag_scheme = False
    
    self.flag_scheme_changed = False
    self.sync_scheme()
    
    
  def default_scheme(self):
    if len(self.data_scheme) > 0:
      self.set_scheme_index(0)
      self.flag_scheme_changed = False
    else:
      o = fi.file_importer()
      
      self.set_scheme_index(-1)
      self.set_name("Default scheme")
      self.set_re(o.regexp_file_name)
      self.set_pattray(o.pattern_tray)
      self.set_patslide(o.pattern_slide)
      self.set_patcolony(o.pattern_colony)
      self.set_comments("This file naming scheme was generated automatically from internal data for there are no currently no schemes in the database.")
      self.flag_scheme_changed = True
    
    self.sync_scheme()


  def sync_scheme(self):
    self.buttonSchemeSave.Enabled = self.flag_scheme_changed
    self.buttonSchemeDelete.Enabled = self.flag_scheme
    self.buttonSchemeNew.Enabled = self.flag_scheme

  def set_re(self, x):
    self.textCtrlRegexp.SetValue(x)
  def get_re(self):
    return self.textCtrlRegexp.GetValue()

  def set_name(self, x):
    self.comboBoxSchemeName.SetValue(x)
  def get_name(self):
    return self.comboBoxSchemeName.GetValue()
  
  def set_pattray(self, x):
    self.textCtrlPatternTray.SetValue(x)
  def get_pattray(self):
    return self.textCtrlPatternTray.GetValue()

  def set_digitsslide(self, x):
    self.textCtrlDigits.SetValue(str(x))
  def get_digitsslide(self):
    return int(self.textCtrlDigits.GetValue())

  def set_patslide(self, x):
    self.textCtrlPatternSlide.SetValue(x)
  def get_patslide(self):
    return self.textCtrlPatternSlide.GetValue()

  def set_patcolony(self, x):
    self.textCtrlPatternColony.SetValue(x)
  def get_patcolony(self):
    return self.textCtrlPatternColony.GetValue()

  def set_comments(self, x):
    self.textCtrlComments.SetValue(x)
    pass
  
  def get_comments(self):
    return self.textCtrlComments.GetValue()
   

  def init_choices(self):
    for s in file_type_choices:
      self.choiceType.Append(s)
    
    self.choiceType.SetSelection(0)

    
  def make_params(self):
    index = self.choiceType.GetSelection()
    if index == wx.NOT_FOUND:
      raise error_x("Please select a file type.")
    self.file_importer_class = data[index][1]
    self.path = self.textCtrlPath.GetValue()
    self.cards = self.textCtrlFiles.GetValue()
    self.regexp_file_name = self.textCtrlRegexp.GetValue()
    self.digits = self.get_digitsslide()
    self.pattern_tray = self.get_pattray()
    self.pattern_slide = self.get_patslide()
    self.pattern_colony = self.get_patcolony()

  def do_it(self, flag_import):
    """If flag_import is True, imports files, otherwise just does a simulation."""
    
    try:
      if flag_import:
        output("-----------------------")
        output("--- IMPORTING FILES ---")
        output("-----------------------")
      else:
        output("------------------")
        output("--- SIMULATION ---")
        output("------------------")
        
      self.make_params()
      
      import file_importer
      o = self.file_importer_class()
      
      o.flag_forreal = flag_import
      o.idexperiment = session.idexperiment
      o.iddomain = session.iddomain
      o.slide_digits = self.digits
      o.regexp_file_name = self.regexp_file_name
      o.pattern_tray = self.pattern_tray
      o.pattern_slide = self.pattern_slide
      o.pattern_colony = self.pattern_colony


      import os
      import fnmatch
      all_in_dir = os.listdir(self.path)
      those = fnmatch.filter(all_in_dir, self.cards)
      those.sort()
      output("# of files: "+len(those).__str__())
    
      no_imported = 0
      no_errors = 0
      for file_name in those:
        try:
          o.file_name = os.path.join(self.path, file_name)
            
          o.import_file()
          
          no_imported += 1
        except error_x, e:
          output("File import failed: "+e.message, OUTPUT_ERROR)
          no_errors += 1
          #raise
      
      if flag_import:
        output("-----------------------------")
        output("--- ENDED IMPORTING FILES ---")
        output("-----------------------------")
      else:
        output("------------------------")
        output("--- ENDED SIMULATION ---")
        output("------------------------")
      
      
      output("# imported: %s" % no_imported)
      output("# errors (not imported): %s" % no_errors)
      output("")

      output("# new trays:        %s" % o.count_tray)
      output("# new slides:       %s" % o.count_slide)
      output("# new colonies:     %s" % o.count_colony)
      output("# new spectra:      %s" % o.count_spectrum)
      output("# replaced spectra: %s" % o.count_spectrum_replaced)
      output("# new seriess:      %s" % o.count_spectrum)
      output("# replaced seriess: %s" % o.count_spectrum_replaced)
      
#      if not flag_import:
#        output("")
#        output("# new trays and slides and colonies is innacurate
      
    except error_x, e:
      output(e.message, OUTPUT_ERROR, True)


  def save_scheme(self, name, flag_insert):
    d = {"name": name,
         "digitsslide": self.get_digitsslide(),
         "re": self.get_re(),
         "pattray": self.get_pattray(),
         "patslide": self.get_patslide(),
         "patcolony": self.get_patcolony(),
         "comments": self.get_comments()
        }
    
    if not flag_insert:
      t_filerescheme.update(d, self.idfilerescheme)
      id = self.idfilerescheme
    else:
      t_filerescheme.insert(d)
      flag_new = True
      id = con.insert_id()

    self.read_data_scheme()
    self.set_scheme_index(self.id2index(id))

  def scheme_changed(self):
    self.flag_scheme_changed = True
    self.sync_scheme()

  #-----------------------------------------------------------------------------
  # events

  def OnButtonSimulateButton(self, event):
    
    self.do_it(False)


  def OnButtonOkButton(self, event):
    self.do_it(True)
    

  def OnButtonCancelButton(self, event):
    flag_close = True
    if self.flag_scheme_changed:
      r = wx.MessageBox("Save changes to file naming scheme '%s'?" % self.get_name(), "Confirm", wx.YES_NO | wx.CANCEL, None)
      if r == wx.YES:
        self.save_scheme(self.get_name(), not self.flag_scheme)
      elif r == wx.CANCEL:
        flag_close = False

    if flag_close:
      self.Close()

  def OnComboBoxSchemeNameCombobox(self, event):
    self.set_scheme_index(self.comboBoxSchemeName.GetSelection()) 

  def OnButtonSchemeSaveButton(self, event):
    self.save_scheme(self.get_name(), not self.flag_scheme)

  def OnButtonSchemeNewButton(self, event):
    self.save_scheme(self.get_name()+' (copy)', True)

  def OnButtonSchemeDeleteButton(self, event):
    if wx.MessageBox("Are you sure, mate?", "Confirm delete", wx.YES_NO, None) == wx.YES:
      t_filerescheme.delete(self.idfilerescheme)
      self.read_data_scheme()
      self.default_scheme()

  def OnComboBoxSchemeNameText(self, event):
    self.scheme_changed()

  def OnDialogImportActivate(self, event):
    import output
    output.ctrl2 = self.textCtrlLog
    event.Skip()
    
  def OnDialogImportClose(self, event):
    output.ctrl2 = None
    event.Skip()

  def OnTextCtrlRegexpText(self, event):
    self.scheme_changed()

  def OnTextCtrlPatternTrayText(self, event):
    self.scheme_changed()

  def OnTextCtrlPatternSlideText(self, event):
    self.scheme_changed()

  def OnTextCtrlPatternColonyText(self, event):
    self.scheme_changed()

  def OnTextCtrlCommentsText(self, event):
    self.scheme_changed()


