"""Pirouette .DAT file import routine.

Actually, the files in case will be tipically generated by OPUS and not Pirouette.
"""

name = "Pirouette .DAT"

import file_importer
import fileinput
import os.path
from table_tray import t_tray
from table_slide import t_slide
from table_colony import t_colony
from table_spectrum import t_spectrum
from table_series import t_series
from output import *
from errors import *
import re


class file_importer_pirouette_dat (file_importer.file_importer):
  def import_file_(self):

    base_name = os.path.basename(self.file_name)
    colony_code = base_name #[0:base_name.rfind(".")]
    
    wncount = -1
    flag_wncount = False
    
    
#    def check_wncount():
#      if wncount < 0:
#        raise error_x("Should have found wavenumber count but didn't.")
#      else:
#        output("Wavenumber count: %s" % wncount)

    self.parse_colony_code(colony_code)
    
    OFFSET = 3
    y = []
    for line in self.file_handle:
      if line[0] == "#":
        if line[1] == "d":
          # Number of wavenumbers, latter we will check consistency against axis
          o = self.p_dec.search(line)
          if o <> None:
            wncount = int(o.group())
          
        elif line[1] == "r":
          # Will not get colony code from inside file, but from the file name.
          pass
          
        elif line[1] == "c":
          # These are the wavenumbers, but we'll ignore them
          pass
                
        
      elif self.lineno >= OFFSET:
        o = self.p_eol.search(line)
        if o <> None:
          y.append(float(line[0: o.start()]))
        else:
          pass
          

      self.lineno += 1
      

    wncount = len(y)
    if wncount == 0:
      pass
    else:
      self.assure_good_wncount(wncount)
      self.write_spectrum(y)
